-- automatically generated by BNF Converter
module Main where
import System.IO ( stdin, hGetContents )
import System.Environment ( getArgs, getProgName )
import System.Exit ( exitFailure, exitSuccess )
import Control.Monad (when)

import LexGrammar
import ParGrammar
import PrintGrammar
import AbsGrammar
import qualified TypeCheck(checkType)
import qualified Interp(transProgram)

import ErrM

type ParseFun a = [Token] -> Err a

myLLexer = myLexer

type Verbosity = Int

newtype Place = Place (Int, Int)
instance Show Place where
  show (Place (x, y)) = showString "(" "" ++ show x ++ ", " ++ show y ++ showString ")" ""

placeFromMaybe :: Maybe (Int, Int) -> Place
placeFromMaybe (Just (x, y)) = Place (x, y)


putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile :: Verbosity ->
    ([LexGrammar.Token] -> ErrM.Err (AbsGrammar.Program (Maybe(Int, Int))))
    -> FilePath -> IO ()
runFile v p f = putStrLn f >> readFile f >>= run v p

run :: Verbosity ->
    ([LexGrammar.Token] -> ErrM.Err (AbsGrammar.Program (Maybe(Int, Int)))) ->
    String -> IO ()
run v p s = let ts = myLLexer s in case p ts of
           Bad s    -> do putStrLn "\nParse              Failed...\n"
                          putStrV v "Tokens:"
                          putStrV v $ show ts
                          putStrLn s
                          exitFailure
           Ok  tree -> do putStrLn "\nParse Successful!"
                          -- showTree v tree
                          b <- TypeCheck.checkType (fmap placeFromMaybe tree)
                          if b then do
                            putStrLn "Type checking finished!"
                            Interp.transProgram (fmap placeFromMaybe tree)
                          else return ()
                          -- exitSuccess


showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree
 = do
      putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
      putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    ]
  exitFailure

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    [] -> getContents >>= run 2 pProgram
    "-s":fs -> mapM_ (runFile 0 pProgram) fs
    fs -> mapM_ (runFile 2 pProgram) fs
