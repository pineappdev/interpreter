-- Programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [TopDef] ;

FnDef.	   TopDef ::= Type Ident "(" [Arg] ")" "=" Block ;

separator nonempty TopDef "" ;

Arg. 	   Arg ::= Type Ident;

separator  Arg "," ;


-- Blocks ----------------------------------------------

Block.     Block ::= "begin" [Decl] "do" [Stmt] "end" ;

separator  Decl "" ;

separator Stmt "" ;

-- Declarations ----------------------------------------------

Decl.      Decl ::= Type Ident "=" Expr ";" ;

FDecl.     Decl ::= TopDef ;

-- Statements ----------------------------------------------

Skip.      Stmt ::= "skip" ";" ;

Ass.       Stmt ::= Ident "=" Expr  ";" ;

Break.     Stmt ::= "break" ";" ;

Continue.  Stmt ::= "continue" ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

SExpr.     Stmt ::= Expr ";" ;

-- Types ---------------------------------------------------

Int.       BaseType ::= "int" ;

Str.       BaseType ::= "string" ;

Bool.      BaseType ::= "bool" ;

BaseType.  Type ::= BaseType ;

Array.     Type ::= BaseType "[]" ;

Tuple.     Type ::= "Tuple" "<" [Type] ">" ;

separator nonempty Type "," ;

-- Expressions ---------------------------------------------

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EApp.      Expr6 ::= Ident "(" [EArg] ")" ;

EArgE.     EArg ::= Expr ;

EArgName.  EArg ::= "&" Ident ;

EString.   Expr6 ::= String ;

ETuple.    Expr6 ::= "{" [Expr] "}" ;

EArray.    Expr6 ::= "[]" ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 6 ;

separator EArg "," ;

separator  Expr "," ;

-- Operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- Comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

